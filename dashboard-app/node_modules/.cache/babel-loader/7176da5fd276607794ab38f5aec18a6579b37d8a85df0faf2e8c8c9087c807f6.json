{"ast":null,"code":"var _jsxFileName = \"/home/admin1/Desktop/PerfromanceMatters/dashboard-app/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// // import React, { useState } from \"react\";\n// const React = require(\"react\");\n// const { useState } = React;\n\n// const Dashboard = () => {\n//   const [studentId, setStudentId] = useState(\"\");\n//   const [subject, setSubject] = useState({ name: \"\", testId: \"\" });\n//   const [sections, setSections] = useState({\n//     section1: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section2: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section3: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section4: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section5: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section6: { pointsEarned: \"\", pointsPossible: \"\" }\n//   });\n\n//   const [errors, setErrors] = useState({});\n\n//   const validatePoints = (pointsEarned, pointsPossible) => {\n//     const min = 0;\n//     const max = 100;\n//     const errors = {};\n\n//     if (isNaN(pointsEarned) || pointsEarned < min || pointsEarned > max) {\n//       errors.pointsEarned = `Points earned must be a number between ${min} and ${max}.`;\n//     }\n\n//     if (isNaN(pointsPossible) || pointsPossible < min || pointsPossible > max) {\n//       errors.pointsPossible = `Points possible must be a number between ${min} and ${max}.`;\n//     }\n\n//     return errors;\n//   };\n\n//   const handleChange = (section, field, value) => {\n//     setSections((prev) => {\n//       const newSections = {\n//         ...prev,\n//         [section]: { ...prev[section], [field]: value }\n//       };\n\n//       // Validate the input\n//       const sectionErrors = validatePoints(\n//         updatedSections[section].pointsEarned,\n//         updatedSections[section].pointsPossible\n//       );\n\n//       const errors = validatePoints(\n//         newSections[section].pointsEarned,\n//         newSections[section].pointsPossible\n//       );\n//       setErrors((prevErrors) => ({\n//         ...prevErrors,\n//         [`${section}${field}`]: errors\n//       }));\n//       return newSections;\n//     });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     const payload = {\n//   //       studentId: studentId,\n//   //       subjects: [\n//   //         {\n//   //           Name: subject.name,\n//   //           testId: subject.testId,\n//   //           sections: sections\n//   //         }\n//   //       ]\n//   //     };\n//   //with validaation\n//   const handleSubmit = async () => {\n//     // Check for any validation errors before submitting\n//     let hasErrors = false;\n//     Object.keys(sections).forEach((section) => {\n//       const { pointsEarned, pointsPossible } = sections[section];\n//       const sectionErrors = validatePoints(pointsEarned, pointsPossible);\n\n//       if (Object.keys(sectionErrors).length > 0) {\n//         hasErrors = true;\n//         setErrors((prevErrors) => ({\n//           ...prevErrors,\n//           [`${section}pointsEarned`]: sectionErrors.pointsEarned,\n//           [`${section}pointsPossible`]: sectionErrors.pointsPossible\n//         }));\n//       }\n//     });\n\n//     if (hasErrors) return; // Prevent form submission if there are errors\n\n//     const response = await fetch(\n//       \"http://localhost:3000/student/updateTestSubjects\",\n//       {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(payload)\n//       }\n//     );\n\n//     const result = await response.json();\n//     console.log(result);\n//   };\n\n//   return (\n//     <div>\n//       <h1> Enter section Points</h1>\n//       {/* Inputs for Student Id and Subject Details */}\n//       <div>\n//         <label>\n//           Student ID:\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Student ID\"\n//             value={studentId}\n//             onChange={(e) => setStudentId(e.target.value)}\n//           />\n//         </label>\n//       </div>\n//       <div>\n//         <label>\n//           Subject Name:\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Subject Name\"\n//             value={subject.name}\n//             onChange={(e) =>\n//               setSubject((prev) => ({ ...prev, name: e.target.value }))\n//             }\n//           />\n//         </label>\n//       </div>\n//       <div>\n//         <label>\n//           Test ID:\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Test ID\"\n//             value={subject.testId}\n//             onChange={(e) =>\n//               setSubject((prev) => ({ ...prev, testId: e.target.value }))\n//             }\n//           />\n//         </label>\n//       </div>\n\n//       {/* Inputs for Section Points */}\n//       {Object.keys(sections).map((section) => (\n//         <div key={section}>\n//           <h3>{section}</h3>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Points Earned\"\n//             value={sections[section].pointsEarned}\n//             onChange={(e) =>\n//               handleChange(section, \"pointsEarned\", e.target.value)\n//             }\n//           />\n//           <input\n//             type=\"number\"\n//             placeholder=\"Points Possible\"\n//             value={sections[section].pointsPossible}\n//             onChange={(e) =>\n//               handleChange(section, \"pointsPossible\", e.target.value)\n//             }\n//           />\n//         </div>\n//       ))}\n\n//       {/* Submit Button */}\n//       <button onClick={handleSubmit}>Submit</button>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// const React = require(\"react\");\n// const { useState } = React;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [studentId, setStudentId] = useState(\"\");\n  const [studentName, setStudentName] = useState(\"\");\n  const [grade, setGrade] = useState(\"\");\n  // const [subjects, setSubjects] = useState({ name: \"\", testId: \"\" });\n  const [subjects, setSubjects] = useState([]);\n  const [sections, setSections] = useState({\n    standrd1: {\n      pointsEarned: \"\",\n      pointsPossible: \"\"\n    },\n    standrd2: {\n      pointsEarned: \"\",\n      pointsPossible: \"\"\n    },\n    standrd3: {\n      pointsEarned: \"\",\n      pointsPossible: \"\"\n    },\n    standrd4: {\n      pointsEarned: \"\",\n      pointsPossible: \"\"\n    },\n    standrd5: {\n      pointsEarned: \"\",\n      pointsPossible: \"\"\n    },\n    standrd6: {\n      pointsEarned: \"\",\n      pointsPossible: \"\"\n    }\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const validatePoints = (pointsEarned, pointsPossible) => {\n    const min = 0;\n    const max = 100;\n    const errors = {};\n    if (isNaN(pointsEarned) || pointsEarned < min || pointsEarned > max) {\n      errors.pointsEarned = `Points earned must be a number between ${min} and ${max}.`;\n    }\n    if (isNaN(pointsPossible) || pointsPossible < min || pointsPossible > max) {\n      errors.pointsPossible = `Points possible must be a number between ${min} and ${max}.`;\n    }\n    return errors;\n  };\n  const handleChange = (section, field, value) => {\n    setSections(prev => {\n      const updatedSections = {\n        ...prev,\n        [section]: {\n          ...prev[section],\n          [field]: value\n        }\n      };\n\n      // Validate the input\n      const sectionErrors = validatePoints(updatedSections[section].pointsEarned, updatedSections[section].pointsPossible);\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [`${section}pointsEarned`]: sectionErrors.pointsEarned,\n        [`${section}pointsPossible`]: sectionErrors.pointsPossible\n      }));\n      return updatedSections;\n    });\n  };\n  const addSubject = () => {\n    setSubjects(prevSubjects => [...prevSubjects, {\n      name: \"\",\n      testId: \"\",\n      sections: {\n        ...sections\n      }\n    }]);\n  };\n  const handleSubjectChange = (index, field, value) => {\n    setSubjects(prev => {\n      const updatedSubjects = [...prev];\n      updatedSubjects[index][field] = value;\n      return updatedSubjects;\n    });\n  };\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n\n    // Validate all sections\n    let hasErrors = false;\n    Object.keys(sections).forEach(section => {\n      const {\n        pointsEarned,\n        pointsPossible\n      } = sections[section];\n      const sectionErrors = validatePoints(pointsEarned, pointsPossible);\n      if (Object.keys(sectionErrors).length > 0) {\n        hasErrors = true;\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          [`${section}pointsEarned`]: sectionErrors.pointsEarned,\n          [`${section}pointsPossible`]: sectionErrors.pointsPossible\n        }));\n      }\n    });\n    const subjectsWithTotals = subjects.map(subj => {\n      //calculate totals for each subject\n\n      const totals = Object.values(sections).reduce((acc, section) => {\n        acc.pointsEarned += Number(section.pointsEarned || 0);\n        acc.pointsPossible += Number(section.pointsPossible || 0);\n        return acc;\n      }, {\n        pointsEarned: 0,\n        pointsPossible: 0\n      });\n      return {\n        ...subj,\n        sections,\n        totalPointsEarned: totals.pointsEarned,\n        totalPointsPossible: totals.pointsPossible\n      };\n    });\n    if (hasErrors) {\n      setIsSubmitting(false);\n      return;\n    }\n\n    // Prepare the payload\n    // const payload = {\n    //   studentId,\n    //   testSubjectData: [\n    //     {\n    //       Name: subject.name,\n    //       testId: subject.testId,\n    //       sections\n    //     }\n    //   ]\n    // };\n    const payload = {\n      studentId,\n      studentName,\n      //Incldes student name\n      grade,\n      // Include student grade\n      testSubjectData: [subjectsWithTotals]\n    };\n    try {\n      const response = await fetch(\"http://localhost:3000/student/updateTestSubjects\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        throw new Error(result.message || \"Failed to update the document.\");\n      }\n      console.log(\"Update successful:\", result);\n      alert(\"Subjects updated successfully!\");\n    } catch (err) {\n      console.error(\"Error during submission:\", err);\n      alert(`Error: ${err.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Enter Section Points\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Student ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Student ID\",\n          value: studentId,\n          onChange: e => setStudentId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Student Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Student Name\",\n          value: studentName,\n          onChange: e => setStudentName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Grade:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Grade\",\n          value: grade,\n          onChange: e => setGrade(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Subject Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Subject Name\",\n          value: subject.name,\n          onChange: e => setSubject(prev => ({\n            ...prev,\n            name: e.target.value\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Test ID\",\n          value: subject.testId,\n          onChange: e => setSubject(prev => ({\n            ...prev,\n            testId: e.target.value\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), Object.keys(sections).map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: section\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Points Earned\",\n        value: sections[section].pointsEarned,\n        onChange: e => handleChange(section, \"pointsEarned\", Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), errors[`${section}pointsEarned`] && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors[`${section}pointsEarned`]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Points Possible\",\n        value: sections[section].pointsPossible,\n        onChange: e => handleChange(section, \"pointsPossible\", Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this), errors[`${section}pointsPossible`] && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors[`${section}pointsPossible`]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 13\n      }, this)]\n    }, section, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isSubmitting,\n      children: isSubmitting ? \"Submitting...\" : \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }, this);\n};\n\n// module.exports = Dashboard;\n_s(Dashboard, \"ueJNev9vZnOs5XG8xRjpNCmBidA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Dashboard","_s","studentId","setStudentId","studentName","setStudentName","grade","setGrade","subjects","setSubjects","sections","setSections","standrd1","pointsEarned","pointsPossible","standrd2","standrd3","standrd4","standrd5","standrd6","errors","setErrors","isSubmitting","setIsSubmitting","validatePoints","min","max","isNaN","handleChange","section","field","value","prev","updatedSections","sectionErrors","prevErrors","addSubject","prevSubjects","name","testId","handleSubjectChange","index","updatedSubjects","handleSubmit","hasErrors","Object","keys","forEach","length","subjectsWithTotals","map","subj","totals","values","reduce","acc","Number","totalPointsEarned","totalPointsPossible","payload","testSubjectData","response","fetch","method","headers","body","JSON","stringify","result","json","ok","Error","message","console","log","alert","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","subject","setSubject","style","color","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/admin1/Desktop/PerfromanceMatters/dashboard-app/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// // import React, { useState } from \"react\";\n// const React = require(\"react\");\n// const { useState } = React;\n\n// const Dashboard = () => {\n//   const [studentId, setStudentId] = useState(\"\");\n//   const [subject, setSubject] = useState({ name: \"\", testId: \"\" });\n//   const [sections, setSections] = useState({\n//     section1: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section2: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section3: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section4: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section5: { pointsEarned: \"\", pointsPossible: \"\" },\n//     section6: { pointsEarned: \"\", pointsPossible: \"\" }\n//   });\n\n//   const [errors, setErrors] = useState({});\n\n//   const validatePoints = (pointsEarned, pointsPossible) => {\n//     const min = 0;\n//     const max = 100;\n//     const errors = {};\n\n//     if (isNaN(pointsEarned) || pointsEarned < min || pointsEarned > max) {\n//       errors.pointsEarned = `Points earned must be a number between ${min} and ${max}.`;\n//     }\n\n//     if (isNaN(pointsPossible) || pointsPossible < min || pointsPossible > max) {\n//       errors.pointsPossible = `Points possible must be a number between ${min} and ${max}.`;\n//     }\n\n//     return errors;\n//   };\n\n//   const handleChange = (section, field, value) => {\n//     setSections((prev) => {\n//       const newSections = {\n//         ...prev,\n//         [section]: { ...prev[section], [field]: value }\n//       };\n\n//       // Validate the input\n//       const sectionErrors = validatePoints(\n//         updatedSections[section].pointsEarned,\n//         updatedSections[section].pointsPossible\n//       );\n\n//       const errors = validatePoints(\n//         newSections[section].pointsEarned,\n//         newSections[section].pointsPossible\n//       );\n//       setErrors((prevErrors) => ({\n//         ...prevErrors,\n//         [`${section}${field}`]: errors\n//       }));\n//       return newSections;\n//     });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     const payload = {\n//   //       studentId: studentId,\n//   //       subjects: [\n//   //         {\n//   //           Name: subject.name,\n//   //           testId: subject.testId,\n//   //           sections: sections\n//   //         }\n//   //       ]\n//   //     };\n//   //with validaation\n//   const handleSubmit = async () => {\n//     // Check for any validation errors before submitting\n//     let hasErrors = false;\n//     Object.keys(sections).forEach((section) => {\n//       const { pointsEarned, pointsPossible } = sections[section];\n//       const sectionErrors = validatePoints(pointsEarned, pointsPossible);\n\n//       if (Object.keys(sectionErrors).length > 0) {\n//         hasErrors = true;\n//         setErrors((prevErrors) => ({\n//           ...prevErrors,\n//           [`${section}pointsEarned`]: sectionErrors.pointsEarned,\n//           [`${section}pointsPossible`]: sectionErrors.pointsPossible\n//         }));\n//       }\n//     });\n\n//     if (hasErrors) return; // Prevent form submission if there are errors\n\n//     const response = await fetch(\n//       \"http://localhost:3000/student/updateTestSubjects\",\n//       {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(payload)\n//       }\n//     );\n\n//     const result = await response.json();\n//     console.log(result);\n//   };\n\n//   return (\n//     <div>\n//       <h1> Enter section Points</h1>\n//       {/* Inputs for Student Id and Subject Details */}\n//       <div>\n//         <label>\n//           Student ID:\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Student ID\"\n//             value={studentId}\n//             onChange={(e) => setStudentId(e.target.value)}\n//           />\n//         </label>\n//       </div>\n//       <div>\n//         <label>\n//           Subject Name:\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Subject Name\"\n//             value={subject.name}\n//             onChange={(e) =>\n//               setSubject((prev) => ({ ...prev, name: e.target.value }))\n//             }\n//           />\n//         </label>\n//       </div>\n//       <div>\n//         <label>\n//           Test ID:\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Test ID\"\n//             value={subject.testId}\n//             onChange={(e) =>\n//               setSubject((prev) => ({ ...prev, testId: e.target.value }))\n//             }\n//           />\n//         </label>\n//       </div>\n\n//       {/* Inputs for Section Points */}\n//       {Object.keys(sections).map((section) => (\n//         <div key={section}>\n//           <h3>{section}</h3>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Points Earned\"\n//             value={sections[section].pointsEarned}\n//             onChange={(e) =>\n//               handleChange(section, \"pointsEarned\", e.target.value)\n//             }\n//           />\n//           <input\n//             type=\"number\"\n//             placeholder=\"Points Possible\"\n//             value={sections[section].pointsPossible}\n//             onChange={(e) =>\n//               handleChange(section, \"pointsPossible\", e.target.value)\n//             }\n//           />\n//         </div>\n//       ))}\n\n//       {/* Submit Button */}\n//       <button onClick={handleSubmit}>Submit</button>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// const React = require(\"react\");\n// const { useState } = React;\n\nimport React, { useState } from \"react\";\n\nconst Dashboard = () => {\n  const [studentId, setStudentId] = useState(\"\");\n  const [studentName, setStudentName] = useState(\"\");\n  const [grade, setGrade] = useState(\"\");\n  // const [subjects, setSubjects] = useState({ name: \"\", testId: \"\" });\n  const [subjects, setSubjects] = useState([]);\n  const [sections, setSections] = useState({\n    standrd1: { pointsEarned: \"\", pointsPossible: \"\" },\n    standrd2: { pointsEarned: \"\", pointsPossible: \"\" },\n    standrd3: { pointsEarned: \"\", pointsPossible: \"\" },\n    standrd4: { pointsEarned: \"\", pointsPossible: \"\" },\n    standrd5: { pointsEarned: \"\", pointsPossible: \"\" },\n    standrd6: { pointsEarned: \"\", pointsPossible: \"\" }\n  });\n\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const validatePoints = (pointsEarned, pointsPossible) => {\n    const min = 0;\n    const max = 100;\n    const errors = {};\n\n    if (isNaN(pointsEarned) || pointsEarned < min || pointsEarned > max) {\n      errors.pointsEarned = `Points earned must be a number between ${min} and ${max}.`;\n    }\n\n    if (isNaN(pointsPossible) || pointsPossible < min || pointsPossible > max) {\n      errors.pointsPossible = `Points possible must be a number between ${min} and ${max}.`;\n    }\n\n    return errors;\n  };\n\n  const handleChange = (section, field, value) => {\n    setSections((prev) => {\n      const updatedSections = {\n        ...prev,\n        [section]: { ...prev[section], [field]: value }\n      };\n\n      // Validate the input\n      const sectionErrors = validatePoints(\n        updatedSections[section].pointsEarned,\n        updatedSections[section].pointsPossible\n      );\n\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [`${section}pointsEarned`]: sectionErrors.pointsEarned,\n        [`${section}pointsPossible`]: sectionErrors.pointsPossible\n      }));\n\n      return updatedSections;\n    });\n  };\n\n  const addSubject = () => {\n    setSubjects((prevSubjects) => [\n      ...prevSubjects,\n      { name: \"\", testId: \"\", sections: { ...sections } }\n    ]);\n  };\n\n  const handleSubjectChange = (index, field, value) => {\n    setSubjects((prev) => {\n      const updatedSubjects = [...prev];\n      updatedSubjects[index][field] = value;\n      return updatedSubjects;\n    });\n  };\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n\n    // Validate all sections\n    let hasErrors = false;\n\n    Object.keys(sections).forEach((section) => {\n      const { pointsEarned, pointsPossible } = sections[section];\n      const sectionErrors = validatePoints(pointsEarned, pointsPossible);\n\n      if (Object.keys(sectionErrors).length > 0) {\n        hasErrors = true;\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [`${section}pointsEarned`]: sectionErrors.pointsEarned,\n          [`${section}pointsPossible`]: sectionErrors.pointsPossible\n        }));\n      }\n    });\n\n    const subjectsWithTotals = subjects.map((subj) => {\n      //calculate totals for each subject\n\n      const totals = Object.values(sections).reduce(\n        (acc, section) => {\n          acc.pointsEarned += Number(section.pointsEarned || 0);\n          acc.pointsPossible += Number(section.pointsPossible || 0);\n          return acc;\n        },\n        { pointsEarned: 0, pointsPossible: 0 }\n      );\n      return {\n        ...subj,\n        sections,\n        totalPointsEarned: totals.pointsEarned,\n        totalPointsPossible: totals.pointsPossible\n      };\n    });\n\n    if (hasErrors) {\n      setIsSubmitting(false);\n      return;\n    }\n\n    // Prepare the payload\n    // const payload = {\n    //   studentId,\n    //   testSubjectData: [\n    //     {\n    //       Name: subject.name,\n    //       testId: subject.testId,\n    //       sections\n    //     }\n    //   ]\n    // };\n    const payload = {\n      studentId,\n      studentName, //Incldes student name\n      grade, // Include student grade\n      testSubjectData: [subjectsWithTotals]\n    };\n\n    try {\n      const response = await fetch(\n        \"http://localhost:3000/student/updateTestSubjects\",\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(payload)\n        }\n      );\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || \"Failed to update the document.\");\n      }\n\n      console.log(\"Update successful:\", result);\n      alert(\"Subjects updated successfully!\");\n    } catch (err) {\n      console.error(\"Error during submission:\", err);\n      alert(`Error: ${err.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Enter Section Points</h1>\n      {/* Inputs for Student ID and Subject Details */}\n      <div>\n        <label>\n          Student ID:\n          <input\n            type=\"text\"\n            placeholder=\"Enter Student ID\"\n            value={studentId}\n            onChange={(e) => setStudentId(e.target.value)}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Student Name:\n          <input\n            type=\"text\"\n            placeholder=\"Enter Student Name\"\n            value={studentName}\n            onChange={(e) => setStudentName(e.target.value)}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Grade:\n          <input\n            type=\"text\"\n            placeholder=\"Enter Grade\"\n            value={grade}\n            onChange={(e) => setGrade(e.target.value)}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Subject Name:\n          <input\n            type=\"text\"\n            placeholder=\"Enter Subject Name\"\n            value={subject.name}\n            onChange={(e) =>\n              setSubject((prev) => ({ ...prev, name: e.target.value }))\n            }\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Test ID:\n          <input\n            type=\"text\"\n            placeholder=\"Enter Test ID\"\n            value={subject.testId}\n            onChange={(e) =>\n              setSubject((prev) => ({ ...prev, testId: e.target.value }))\n            }\n          />\n        </label>\n      </div>\n\n      {/* Inputs for Section Points */}\n      {Object.keys(sections).map((section) => (\n        <div key={section}>\n          <h3>{section}</h3>\n          <input\n            type=\"number\"\n            placeholder=\"Points Earned\"\n            value={sections[section].pointsEarned}\n            onChange={(e) =>\n              handleChange(section, \"pointsEarned\", Number(e.target.value))\n            }\n          />\n          {errors[`${section}pointsEarned`] && (\n            <p style={{ color: \"red\" }}>{errors[`${section}pointsEarned`]}</p>\n          )}\n          <input\n            type=\"number\"\n            placeholder=\"Points Possible\"\n            value={sections[section].pointsPossible}\n            onChange={(e) =>\n              handleChange(section, \"pointsPossible\", Number(e.target.value))\n            }\n          />\n          {errors[`${section}pointsPossible`] && (\n            <p style={{ color: \"red\" }}>{errors[`${section}pointsPossible`]}</p>\n          )}\n        </div>\n      ))}\n\n      {/* Submit Button */}\n      <button onClick={handleSubmit} disabled={isSubmitting}>\n        {isSubmitting ? \"Submitting...\" : \"Submit\"}\n      </button>\n    </div>\n  );\n};\n\n// module.exports = Dashboard;\nexport default Dashboard;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC;IACvCe,QAAQ,EAAE;MAAEC,YAAY,EAAE,EAAE;MAAEC,cAAc,EAAE;IAAG,CAAC;IAClDC,QAAQ,EAAE;MAAEF,YAAY,EAAE,EAAE;MAAEC,cAAc,EAAE;IAAG,CAAC;IAClDE,QAAQ,EAAE;MAAEH,YAAY,EAAE,EAAE;MAAEC,cAAc,EAAE;IAAG,CAAC;IAClDG,QAAQ,EAAE;MAAEJ,YAAY,EAAE,EAAE;MAAEC,cAAc,EAAE;IAAG,CAAC;IAClDI,QAAQ,EAAE;MAAEL,YAAY,EAAE,EAAE;MAAEC,cAAc,EAAE;IAAG,CAAC;IAClDK,QAAQ,EAAE;MAAEN,YAAY,EAAE,EAAE;MAAEC,cAAc,EAAE;IAAG;EACnD,CAAC,CAAC;EAEF,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAM2B,cAAc,GAAGA,CAACX,YAAY,EAAEC,cAAc,KAAK;IACvD,MAAMW,GAAG,GAAG,CAAC;IACb,MAAMC,GAAG,GAAG,GAAG;IACf,MAAMN,MAAM,GAAG,CAAC,CAAC;IAEjB,IAAIO,KAAK,CAACd,YAAY,CAAC,IAAIA,YAAY,GAAGY,GAAG,IAAIZ,YAAY,GAAGa,GAAG,EAAE;MACnEN,MAAM,CAACP,YAAY,GAAG,0CAA0CY,GAAG,QAAQC,GAAG,GAAG;IACnF;IAEA,IAAIC,KAAK,CAACb,cAAc,CAAC,IAAIA,cAAc,GAAGW,GAAG,IAAIX,cAAc,GAAGY,GAAG,EAAE;MACzEN,MAAM,CAACN,cAAc,GAAG,4CAA4CW,GAAG,QAAQC,GAAG,GAAG;IACvF;IAEA,OAAON,MAAM;EACf,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAACC,OAAO,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC9CpB,WAAW,CAAEqB,IAAI,IAAK;MACpB,MAAMC,eAAe,GAAG;QACtB,GAAGD,IAAI;QACP,CAACH,OAAO,GAAG;UAAE,GAAGG,IAAI,CAACH,OAAO,CAAC;UAAE,CAACC,KAAK,GAAGC;QAAM;MAChD,CAAC;;MAED;MACA,MAAMG,aAAa,GAAGV,cAAc,CAClCS,eAAe,CAACJ,OAAO,CAAC,CAAChB,YAAY,EACrCoB,eAAe,CAACJ,OAAO,CAAC,CAACf,cAC3B,CAAC;MAEDO,SAAS,CAAEc,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb,CAAC,GAAGN,OAAO,cAAc,GAAGK,aAAa,CAACrB,YAAY;QACtD,CAAC,GAAGgB,OAAO,gBAAgB,GAAGK,aAAa,CAACpB;MAC9C,CAAC,CAAC,CAAC;MAEH,OAAOmB,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB3B,WAAW,CAAE4B,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAEC,IAAI,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAE7B,QAAQ,EAAE;QAAE,GAAGA;MAAS;IAAE,CAAC,CACpD,CAAC;EACJ,CAAC;EAED,MAAM8B,mBAAmB,GAAGA,CAACC,KAAK,EAAEX,KAAK,EAAEC,KAAK,KAAK;IACnDtB,WAAW,CAAEuB,IAAI,IAAK;MACpB,MAAMU,eAAe,GAAG,CAAC,GAAGV,IAAI,CAAC;MACjCU,eAAe,CAACD,KAAK,CAAC,CAACX,KAAK,CAAC,GAAGC,KAAK;MACrC,OAAOW,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC;EACD,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BpB,eAAe,CAAC,IAAI,CAAC;;IAErB;IACA,IAAIqB,SAAS,GAAG,KAAK;IAErBC,MAAM,CAACC,IAAI,CAACpC,QAAQ,CAAC,CAACqC,OAAO,CAAElB,OAAO,IAAK;MACzC,MAAM;QAAEhB,YAAY;QAAEC;MAAe,CAAC,GAAGJ,QAAQ,CAACmB,OAAO,CAAC;MAC1D,MAAMK,aAAa,GAAGV,cAAc,CAACX,YAAY,EAAEC,cAAc,CAAC;MAElE,IAAI+B,MAAM,CAACC,IAAI,CAACZ,aAAa,CAAC,CAACc,MAAM,GAAG,CAAC,EAAE;QACzCJ,SAAS,GAAG,IAAI;QAChBvB,SAAS,CAAEc,UAAU,KAAM;UACzB,GAAGA,UAAU;UACb,CAAC,GAAGN,OAAO,cAAc,GAAGK,aAAa,CAACrB,YAAY;UACtD,CAAC,GAAGgB,OAAO,gBAAgB,GAAGK,aAAa,CAACpB;QAC9C,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC;IAEF,MAAMmC,kBAAkB,GAAGzC,QAAQ,CAAC0C,GAAG,CAAEC,IAAI,IAAK;MAChD;;MAEA,MAAMC,MAAM,GAAGP,MAAM,CAACQ,MAAM,CAAC3C,QAAQ,CAAC,CAAC4C,MAAM,CAC3C,CAACC,GAAG,EAAE1B,OAAO,KAAK;QAChB0B,GAAG,CAAC1C,YAAY,IAAI2C,MAAM,CAAC3B,OAAO,CAAChB,YAAY,IAAI,CAAC,CAAC;QACrD0C,GAAG,CAACzC,cAAc,IAAI0C,MAAM,CAAC3B,OAAO,CAACf,cAAc,IAAI,CAAC,CAAC;QACzD,OAAOyC,GAAG;MACZ,CAAC,EACD;QAAE1C,YAAY,EAAE,CAAC;QAAEC,cAAc,EAAE;MAAE,CACvC,CAAC;MACD,OAAO;QACL,GAAGqC,IAAI;QACPzC,QAAQ;QACR+C,iBAAiB,EAAEL,MAAM,CAACvC,YAAY;QACtC6C,mBAAmB,EAAEN,MAAM,CAACtC;MAC9B,CAAC;IACH,CAAC,CAAC;IAEF,IAAI8B,SAAS,EAAE;MACbrB,eAAe,CAAC,KAAK,CAAC;MACtB;IACF;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMoC,OAAO,GAAG;MACdzD,SAAS;MACTE,WAAW;MAAE;MACbE,KAAK;MAAE;MACPsD,eAAe,EAAE,CAACX,kBAAkB;IACtC,CAAC;IAED,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD,EAClD;QACEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;MAC9B,CACF,CAAC;MAED,MAAMS,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAEpC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,MAAM,CAACI,OAAO,IAAI,gCAAgC,CAAC;MACrE;MAEAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,MAAM,CAAC;MACzCO,KAAK,CAAC,gCAAgC,CAAC;IACzC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZH,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;MAC9CD,KAAK,CAAC,UAAUC,GAAG,CAACJ,OAAO,EAAE,CAAC;IAChC,CAAC,SAAS;MACRjD,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACExB,OAAA;IAAA+E,QAAA,gBACE/E,OAAA;MAAA+E,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE7BnF,OAAA;MAAA+E,QAAA,eACE/E,OAAA;QAAA+E,QAAA,GAAO,aAEL,eAAA/E,OAAA;UACEoF,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,kBAAkB;UAC9BrD,KAAK,EAAE7B,SAAU;UACjBmF,QAAQ,EAAGC,CAAC,IAAKnF,YAAY,CAACmF,CAAC,CAACC,MAAM,CAACxD,KAAK;QAAE;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNnF,OAAA;MAAA+E,QAAA,eACE/E,OAAA;QAAA+E,QAAA,GAAO,eAEL,eAAA/E,OAAA;UACEoF,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,oBAAoB;UAChCrD,KAAK,EAAE3B,WAAY;UACnBiF,QAAQ,EAAGC,CAAC,IAAKjF,cAAc,CAACiF,CAAC,CAACC,MAAM,CAACxD,KAAK;QAAE;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNnF,OAAA;MAAA+E,QAAA,eACE/E,OAAA;QAAA+E,QAAA,GAAO,QAEL,eAAA/E,OAAA;UACEoF,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,aAAa;UACzBrD,KAAK,EAAEzB,KAAM;UACb+E,QAAQ,EAAGC,CAAC,IAAK/E,QAAQ,CAAC+E,CAAC,CAACC,MAAM,CAACxD,KAAK;QAAE;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNnF,OAAA;MAAA+E,QAAA,eACE/E,OAAA;QAAA+E,QAAA,GAAO,eAEL,eAAA/E,OAAA;UACEoF,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,oBAAoB;UAChCrD,KAAK,EAAEyD,OAAO,CAAClD,IAAK;UACpB+C,QAAQ,EAAGC,CAAC,IACVG,UAAU,CAAEzD,IAAI,KAAM;YAAE,GAAGA,IAAI;YAAEM,IAAI,EAAEgD,CAAC,CAACC,MAAM,CAACxD;UAAM,CAAC,CAAC;QACzD;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNnF,OAAA;MAAA+E,QAAA,eACE/E,OAAA;QAAA+E,QAAA,GAAO,UAEL,eAAA/E,OAAA;UACEoF,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,eAAe;UAC3BrD,KAAK,EAAEyD,OAAO,CAACjD,MAAO;UACtB8C,QAAQ,EAAGC,CAAC,IACVG,UAAU,CAAEzD,IAAI,KAAM;YAAE,GAAGA,IAAI;YAAEO,MAAM,EAAE+C,CAAC,CAACC,MAAM,CAACxD;UAAM,CAAC,CAAC;QAC3D;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EAGLrC,MAAM,CAACC,IAAI,CAACpC,QAAQ,CAAC,CAACwC,GAAG,CAAErB,OAAO,iBACjC9B,OAAA;MAAA+E,QAAA,gBACE/E,OAAA;QAAA+E,QAAA,EAAKjD;MAAO;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAClBnF,OAAA;QACEoF,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,eAAe;QAC3BrD,KAAK,EAAErB,QAAQ,CAACmB,OAAO,CAAC,CAAChB,YAAa;QACtCwE,QAAQ,EAAGC,CAAC,IACV1D,YAAY,CAACC,OAAO,EAAE,cAAc,EAAE2B,MAAM,CAAC8B,CAAC,CAACC,MAAM,CAACxD,KAAK,CAAC;MAC7D;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EACD9D,MAAM,CAAC,GAAGS,OAAO,cAAc,CAAC,iBAC/B9B,OAAA;QAAG2F,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAb,QAAA,EAAE1D,MAAM,CAAC,GAAGS,OAAO,cAAc;MAAC;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAClE,eACDnF,OAAA;QACEoF,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,iBAAiB;QAC7BrD,KAAK,EAAErB,QAAQ,CAACmB,OAAO,CAAC,CAACf,cAAe;QACxCuE,QAAQ,EAAGC,CAAC,IACV1D,YAAY,CAACC,OAAO,EAAE,gBAAgB,EAAE2B,MAAM,CAAC8B,CAAC,CAACC,MAAM,CAACxD,KAAK,CAAC;MAC/D;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EACD9D,MAAM,CAAC,GAAGS,OAAO,gBAAgB,CAAC,iBACjC9B,OAAA;QAAG2F,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAb,QAAA,EAAE1D,MAAM,CAAC,GAAGS,OAAO,gBAAgB;MAAC;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CACpE;IAAA,GAvBOrD,OAAO;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAwBZ,CACN,CAAC,eAGFnF,OAAA;MAAQ6F,OAAO,EAAEjD,YAAa;MAACkD,QAAQ,EAAEvE,YAAa;MAAAwD,QAAA,EACnDxD,YAAY,GAAG,eAAe,GAAG;IAAQ;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;;AAED;AAAAjF,EAAA,CApQMD,SAAS;AAAA8F,EAAA,GAAT9F,SAAS;AAqQf,eAAeA,SAAS;AAAC,IAAA8F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}